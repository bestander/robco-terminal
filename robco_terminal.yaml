esphome:
  name: robco-terminal
  friendly_name: RobCo Terminal
  platformio_options:
    board_build.flash_mode: dio
    board_build.psram_type: opi
    board_build.flash_size: 16MB
    board_build.partitions: huge_app.csv

# ESP32-S3 configuration for 8M PSRAM + 16M Flash board
esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
  variant: esp32s3

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "RobCo Terminal Fallback"
    password: "robco123"

captive_portal:

# MQTT for Home Assistant integration
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  topic_prefix: robco_terminal

# USB Host for keyboard support (commented out for initial setup)
# usb_host:

# Custom external components (commented out for initial validation)
external_components:
  - source:
      type: local
      path: components

# PSRAM configuration for 8M PSRAM
psram:
  mode: octal
  speed: 80MHz

# SPI for basic display communication (even RGB displays often need SPI for init)
spi:
  clk_pin: GPIO7
  mosi_pin: GPIO6

# Display configuration for 7" 800x480 RGB LCD
# Note: Your board may use different pins - check the schematic
display:
  - platform: ili9xxx
    model: ili9488
    id: robco_display
    cs_pin: GPIO5
    dc_pin: GPIO4
    reset_pin: GPIO48
    rotation: 0
    invert_colors: false
    update_interval: 50ms
    lambda: |-
      // Display will be handled by custom component
      return;

# Custom RobCo Terminal component (commented out for initial setup)
robco_terminal:
  id: terminal
  display_id: robco_display
  keyboard_id: usb_keyboard
  mqtt_topic_prefix: "robco_terminal"
  
  # Terminal configuration
  boot_sequence: true
  cursor_blink: true
  font_color: 0x00FF00  # Classic green
  background_color: 0x000000  # Black
  
  # Menu structure
  menu_items:
    - title: "VAULT DOOR CONTROL"
      type: submenu
      items:
        - title: "Door Status"
          type: status
          mqtt_topic: "vault/door/status"
          readonly: true
        - title: "Open Door"
          type: action
          mqtt_topic: "vault/door/command"
          mqtt_payload: "OPEN"
          condition_topic: "vault/door/status"
          condition_value: "CLOSED"
        - title: "Close Door"
          type: action
          mqtt_topic: "vault/door/command"
          mqtt_payload: "CLOSE"
          condition_topic: "vault/door/status"
          condition_value: "OPEN"
          
    - title: "SECURITY SYSTEM"
      type: submenu
      items:
        - title: "System Status"
          type: status
          mqtt_topic: "security/status"
          readonly: true
        - title: "Arm System"
          type: action
          mqtt_topic: "security/command"
          mqtt_payload: "ARM"
        - title: "Disarm System"
          type: action
          mqtt_topic: "security/command"
          mqtt_payload: "DISARM"
          
    - title: "TERMINAL LOGS"
      type: text_editor
      file_path: "/logs/terminal.log"
      max_entries: 100

# USB Keyboard (commented out for initial setup)
# usb_keyboard:
#   id: usb_keyboard
#   on_key_press:
#     then:
#       - lambda: |-
#           id(terminal).handle_key_press(key, modifiers);

# Status LEDs (optional)
light:
  - platform: binary
    id: status_led
    name: "Terminal Status LED"
    output: status_led_output

# Output for status LED
output:
  - platform: gpio
    pin: GPIO2
    id: status_led_output
  - platform: ledc
    pin: GPIO1
    id: buzzer_output

rtttl:
  output: buzzer_output
  id: buzzer

# Home Assistant sensors to monitor terminal state
sensor:
  - platform: template
    name: "Terminal Current Menu"
    id: current_menu
    
text_sensor:
  - platform: template
    name: "Terminal Status"
    id: terminal_status
