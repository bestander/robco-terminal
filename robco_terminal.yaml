esphome:
  name: robco-terminal
  friendly_name: RobCo Terminal OTA Ready
  platformio_options:
    board_build.flash_mode: dio
    board_build.psram_type: opi
    board_build.flash_size: 16MB
    board_build.partitions: default_16MB.csv  # 16MB partition table with OTA support (6.5MB per app slot)
    # OTA optimization flags
    build_flags:
      - -DCORE_DEBUG_LEVEL=1  # Reduce logging during OTA
      - -DCONFIG_ARDUHAL_LOG_DEFAULT_LEVEL=1
      - -DCONFIG_ASYNC_TCP_STACK_SIZE=8192
      - -DCONFIG_ASYNC_TCP_PRIORITY=10
      # ArduinoOTA optimizations for large firmware
      - -DCONFIG_ARDUINO_OTA_BUF_SIZE=1024
      - -DCONFIG_SPIRAM_USE_MALLOC=1
      - -DCONFIG_SPIRAM_MALLOC_ALWAYSINTERNAL=0
      # Increase OTA timeout and buffer settings
      - -DCONFIG_LWIP_SO_RCVBUF=1
      - -DCONFIG_TCP_SND_BUF_DEFAULT=32768
      - -DCONFIG_TCP_WND_DEFAULT=32768
    # Monitor settings for debugging
    monitor_speed: 115200
    monitor_port: /dev/cu.usbserial-110

# ESP32-S3 configuration for 8M PSRAM + 16M Flash board
esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
  variant: esp32s3

# Enable logging (over WiFi when connected, USB when not) - reduced for OTA
logger:
  level: INFO
  baud_rate: 115200
  hardware_uart: UART0
  logs:
    component: INFO
    robco_terminal: INFO  # Reduced from DEBUG
    wifi: INFO
    api: INFO
    ota: INFO
    mqtt: INFO
    # Enable USB and system logs for debugging
    esp32: INFO  # Reduced from DEBUG
    esp32.gpio: WARN  # Further reduced

# Enable Home Assistant API for OTA debugging
api:
  encryption:
    key: !secret api_encryption_key

# Enable web server for HTTP control
web_server:
  port: 80
  version: 3
  auth:
    username: admin
    password: !secret ota_password

# Enable OTA updates over WiFi with enhanced stability
ota:
  - platform: esphome
    password: !secret ota_password
    # Enhanced OTA settings for large firmware uploads
    port: 3232

# Safe mode for recovery from failed OTA uploads
safe_mode:
  reboot_timeout: 10min
  num_attempts: 3

# WiFi configuration for OTA uploads with enhanced stability
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  
  # Enhanced WiFi power and stability settings for OTA
  power_save_mode: none
  fast_connect: true
  output_power: 20dB  # Maximum WiFi power for stable connection
  
  # Reduced connection timeout to prevent reboot during OTA
  reboot_timeout: 0s  # Disable WiFi reboot timeout during OTA
  
  # Manual IP configuration for more stable OTA (optional - uncomment if needed)
  # manual_ip:
  #   static_ip: 192.168.1.194
  #   gateway: 192.168.1.1
  #   subnet: 255.255.255.0
  #   dns1: 8.8.8.8
  #   dns2: 8.8.4.4
  
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "RobCo Terminal Fallback"
    password: "robco123"

captive_portal:

# MQTT for Home Assistant integration and debugging
# mqtt:
#   broker: !secret mqtt_broker
#   username: !secret mqtt_username
#   password: !secret mqtt_password
#   topic_prefix: robco_terminal

# Custom external components - load from components directory
external_components:
  - source:
      type: local
      path: components

# PSRAM configuration for 8M PSRAM - optimized for OTA
psram:
  mode: octal
  speed: 80MHz

# SPI configured with unused pins to provide SPI.h for Arduino_GFX
# These pins are NOT used by the RGB display, just needed for compilation
spi:
  clk_pin: GPIO12   # Free pin, not used by RGB display
  mosi_pin: GPIO11  # Free pin, not used by RGB display
  # This is only for SPI.h compilation, Arduino_GFX uses its own SWSPI

# I2C buses - to initialize Wire.h
i2c:
  sda: GPIO8
  scl: GPIO9

# Font temporarily disabled to test if it's clearing the display
# font:
#   - file: "gfonts://Roboto Mono"
#     id: terminal_font
#     size: 16

# Simple OTA Safety component - disables RobCo Terminal for next boot only
ota_safety:
  id: ota_safety_component
  enable_http_endpoints: true  # Enable HTTP API for OTA mode


# RobCo Terminal with integrated Arduino_GFX display and USB keyboard
robco_terminal:
  id: terminal
  mqtt_topic_prefix: "robco_terminal"
  
  # Terminal configuration (USB pins hardcoded in component for ESP32-8048S070N/C)
  boot_sequence: true
  cursor_blink: true
  font_color: 0x00FF00  # Classic green
  background_color: 0x000000  # Black
  
  # Menu structure
  menu_items:
    - title: "VAULT DOOR CONTROL"
      type: submenu
      items:
        - title: "Door Status"
          type: status
          mqtt_topic: "vault/door/status"
          readonly: true
        - title: "Open Door"
          type: action
          mqtt_topic: "vault/door/command"
          mqtt_payload: "OPEN"
          condition_topic: "vault/door/status"
          condition_value: "CLOSED"
        - title: "Close Door"
          type: action
          mqtt_topic: "vault/door/command"
          mqtt_payload: "CLOSE"
          condition_topic: "vault/door/status"
          condition_value: "OPEN"
          
    - title: "SECURITY SYSTEM12"
      type: submenu
      items:
        - title: "System Status1"
          type: status
          mqtt_topic: "security/status"
          readonly: true
        - title: "Arm System"
          type: action
          mqtt_topic: "security/command"
          mqtt_payload: "ARM"
        - title: "Disarm System"
          type: action
          mqtt_topic: "security/command"
          mqtt_payload: "DISARM"
          
    - title: "TERMINAL LOGS"
      type: text_editor
      file_path: "/logs/terminal.log"
      max_entries: 100

# Status LEDs (optional)
light:
  - platform: binary
    id: status_led
    name: "Terminal Status LED"
    output: status_led_output

# Output for status LED
output:
  - platform: gpio
    pin: GPIO2
    id: status_led_output
  - platform: ledc
    pin: GPIO1
    id: buzzer_output

rtttl:
  output: buzzer_output
  id: buzzer

# Home Assistant sensors to monitor terminal state
sensor:
  - platform: template
    name: "Terminal Current Menu"
    id: current_menu
    
text_sensor:
  - platform: template
    name: "Terminal Status"
    id: terminal_status
